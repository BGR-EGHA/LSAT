# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\ann_advset.ui'
#
# Created by: PyQt5 UI code generator 5.14.2
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_ANN_advset(object):
    def setupUi(self, ANN_advset):
        ANN_advset.setObjectName("ANN_advset")
        ANN_advset.resize(1011, 221)
        self.centralwidget = QtWidgets.QWidget(ANN_advset)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setContentsMargins(6, 6, 6, -1)
        self.gridLayout.setObjectName("gridLayout")
        self.power_tLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.power_tLineEdit.setObjectName("power_tLineEdit")
        self.gridLayout.addWidget(self.power_tLineEdit, 1, 6, 1, 1)
        self.shuffleLabel = QtWidgets.QLabel(self.centralwidget)
        self.shuffleLabel.setObjectName("shuffleLabel")
        self.gridLayout.addWidget(self.shuffleLabel, 1, 9, 1, 1)
        self.learning_rate_initLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.learning_rate_initLineEdit.setObjectName("learning_rate_initLineEdit")
        self.gridLayout.addWidget(self.learning_rate_initLineEdit, 1, 4, 1, 1)
        self.learning_rate_initLabel = QtWidgets.QLabel(self.centralwidget)
        self.learning_rate_initLabel.setObjectName("learning_rate_initLabel")
        self.gridLayout.addWidget(self.learning_rate_initLabel, 1, 3, 1, 1)
        self.power_tLabel = QtWidgets.QLabel(self.centralwidget)
        self.power_tLabel.setObjectName("power_tLabel")
        self.gridLayout.addWidget(self.power_tLabel, 1, 5, 1, 1)
        self.max_iterLabel = QtWidgets.QLabel(self.centralwidget)
        self.max_iterLabel.setObjectName("max_iterLabel")
        self.gridLayout.addWidget(self.max_iterLabel, 1, 7, 1, 1)
        self.alphaLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.alphaLineEdit.setObjectName("alphaLineEdit")
        self.gridLayout.addWidget(self.alphaLineEdit, 0, 8, 1, 1)
        self.max_iterLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.max_iterLineEdit.setObjectName("max_iterLineEdit")
        self.gridLayout.addWidget(self.max_iterLineEdit, 1, 8, 1, 1)
        self.momentumLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.momentumLineEdit.setObjectName("momentumLineEdit")
        self.gridLayout.addWidget(self.momentumLineEdit, 4, 11, 1, 1)
        self.batch_sizeLabel = QtWidgets.QLabel(self.centralwidget)
        self.batch_sizeLabel.setObjectName("batch_sizeLabel")
        self.gridLayout.addWidget(self.batch_sizeLabel, 0, 9, 1, 1)
        self.batch_sizeLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.batch_sizeLineEdit.setObjectName("batch_sizeLineEdit")
        self.gridLayout.addWidget(self.batch_sizeLineEdit, 0, 11, 1, 1)
        self.verboseLabel = QtWidgets.QLabel(self.centralwidget)
        self.verboseLabel.setObjectName("verboseLabel")
        self.gridLayout.addWidget(self.verboseLabel, 4, 5, 1, 1)
        self.hidden_layer_sizesLabel = QtWidgets.QLabel(self.centralwidget)
        self.hidden_layer_sizesLabel.setObjectName("hidden_layer_sizesLabel")
        self.gridLayout.addWidget(self.hidden_layer_sizesLabel, 0, 1, 1, 1)
        self.solverLabel = QtWidgets.QLabel(self.centralwidget)
        self.solverLabel.setObjectName("solverLabel")
        self.gridLayout.addWidget(self.solverLabel, 0, 5, 1, 1)
        self.random_stateLabel = QtWidgets.QLabel(self.centralwidget)
        self.random_stateLabel.setObjectName("random_stateLabel")
        self.gridLayout.addWidget(self.random_stateLabel, 4, 1, 1, 1)
        self.activationLabel = QtWidgets.QLabel(self.centralwidget)
        self.activationLabel.setObjectName("activationLabel")
        self.gridLayout.addWidget(self.activationLabel, 0, 3, 1, 1)
        self.alphaLabel = QtWidgets.QLabel(self.centralwidget)
        self.alphaLabel.setObjectName("alphaLabel")
        self.gridLayout.addWidget(self.alphaLabel, 0, 7, 1, 1)
        self.hidden_layer_sizesLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.hidden_layer_sizesLineEdit.setObjectName("hidden_layer_sizesLineEdit")
        self.gridLayout.addWidget(self.hidden_layer_sizesLineEdit, 0, 2, 1, 1)
        self.learning_rateLabel = QtWidgets.QLabel(self.centralwidget)
        self.learning_rateLabel.setObjectName("learning_rateLabel")
        self.gridLayout.addWidget(self.learning_rateLabel, 1, 1, 1, 1)
        self.random_stateLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.random_stateLineEdit.setObjectName("random_stateLineEdit")
        self.gridLayout.addWidget(self.random_stateLineEdit, 4, 2, 1, 1)
        self.tolLabel = QtWidgets.QLabel(self.centralwidget)
        self.tolLabel.setObjectName("tolLabel")
        self.gridLayout.addWidget(self.tolLabel, 4, 3, 1, 1)
        self.warm_startLabel = QtWidgets.QLabel(self.centralwidget)
        self.warm_startLabel.setObjectName("warm_startLabel")
        self.gridLayout.addWidget(self.warm_startLabel, 4, 7, 1, 1)
        self.momentumLabel = QtWidgets.QLabel(self.centralwidget)
        self.momentumLabel.setObjectName("momentumLabel")
        self.gridLayout.addWidget(self.momentumLabel, 4, 9, 1, 1)
        self.tolLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.tolLineEdit.setObjectName("tolLineEdit")
        self.gridLayout.addWidget(self.tolLineEdit, 4, 4, 1, 1)
        self.nesterovs_momentumLabel = QtWidgets.QLabel(self.centralwidget)
        self.nesterovs_momentumLabel.setObjectName("nesterovs_momentumLabel")
        self.gridLayout.addWidget(self.nesterovs_momentumLabel, 5, 1, 1, 1)
        self.validation_fractionLabel = QtWidgets.QLabel(self.centralwidget)
        self.validation_fractionLabel.setObjectName("validation_fractionLabel")
        self.gridLayout.addWidget(self.validation_fractionLabel, 5, 5, 1, 1)
        self.beta_1Label = QtWidgets.QLabel(self.centralwidget)
        self.beta_1Label.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.beta_1Label.setObjectName("beta_1Label")
        self.gridLayout.addWidget(self.beta_1Label, 5, 7, 1, 1)
        self.beta_1LineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.beta_1LineEdit.setEnabled(True)
        self.beta_1LineEdit.setAutoFillBackground(False)
        self.beta_1LineEdit.setFrame(True)
        self.beta_1LineEdit.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.beta_1LineEdit.setClearButtonEnabled(False)
        self.beta_1LineEdit.setObjectName("beta_1LineEdit")
        self.gridLayout.addWidget(self.beta_1LineEdit, 5, 8, 1, 1)
        self.early_stoppingLabel = QtWidgets.QLabel(self.centralwidget)
        self.early_stoppingLabel.setObjectName("early_stoppingLabel")
        self.gridLayout.addWidget(self.early_stoppingLabel, 5, 3, 1, 1)
        self.beta_2LineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.beta_2LineEdit.setObjectName("beta_2LineEdit")
        self.gridLayout.addWidget(self.beta_2LineEdit, 5, 11, 1, 1)
        self.beta_2Label = QtWidgets.QLabel(self.centralwidget)
        self.beta_2Label.setObjectName("beta_2Label")
        self.gridLayout.addWidget(self.beta_2Label, 5, 9, 1, 1)
        self.validation_fractionLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.validation_fractionLineEdit.setObjectName("validation_fractionLineEdit")
        self.gridLayout.addWidget(self.validation_fractionLineEdit, 5, 6, 1, 1)
        self.applyPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.applyPushButton.setObjectName("applyPushButton")
        self.gridLayout.addWidget(self.applyPushButton, 12, 11, 1, 1)
        self.epsilonLabel = QtWidgets.QLabel(self.centralwidget)
        self.epsilonLabel.setObjectName("epsilonLabel")
        self.gridLayout.addWidget(self.epsilonLabel, 12, 1, 1, 1)
        self.epsilonLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.epsilonLineEdit.setObjectName("epsilonLineEdit")
        self.gridLayout.addWidget(self.epsilonLineEdit, 12, 2, 1, 1)
        self.n_iter_no_changeLabel = QtWidgets.QLabel(self.centralwidget)
        self.n_iter_no_changeLabel.setObjectName("n_iter_no_changeLabel")
        self.gridLayout.addWidget(self.n_iter_no_changeLabel, 12, 3, 1, 1)
        self.n_iter_no_changeLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.n_iter_no_changeLineEdit.setObjectName("n_iter_no_changeLineEdit")
        self.gridLayout.addWidget(self.n_iter_no_changeLineEdit, 12, 4, 1, 1)
        self.activationComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.activationComboBox.setObjectName("activationComboBox")
        self.activationComboBox.addItem("")
        self.activationComboBox.addItem("")
        self.activationComboBox.addItem("")
        self.activationComboBox.addItem("")
        self.gridLayout.addWidget(self.activationComboBox, 0, 4, 1, 1)
        self.solverComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.solverComboBox.setObjectName("solverComboBox")
        self.solverComboBox.addItem("")
        self.solverComboBox.addItem("")
        self.solverComboBox.addItem("")
        self.gridLayout.addWidget(self.solverComboBox, 0, 6, 1, 1)
        self.learning_rateComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.learning_rateComboBox.setObjectName("learning_rateComboBox")
        self.learning_rateComboBox.addItem("")
        self.learning_rateComboBox.addItem("")
        self.learning_rateComboBox.addItem("")
        self.gridLayout.addWidget(self.learning_rateComboBox, 1, 2, 1, 1)
        self.shuffleCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.shuffleCheckBox.setText("")
        self.shuffleCheckBox.setChecked(True)
        self.shuffleCheckBox.setObjectName("shuffleCheckBox")
        self.gridLayout.addWidget(self.shuffleCheckBox, 1, 11, 1, 1)
        self.verboseCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.verboseCheckBox.setText("")
        self.verboseCheckBox.setChecked(True)
        self.verboseCheckBox.setObjectName("verboseCheckBox")
        self.gridLayout.addWidget(self.verboseCheckBox, 4, 6, 1, 1)
        self.warm_startCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.warm_startCheckBox.setText("")
        self.warm_startCheckBox.setObjectName("warm_startCheckBox")
        self.gridLayout.addWidget(self.warm_startCheckBox, 4, 8, 1, 1)
        self.nesterovs_momentumCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.nesterovs_momentumCheckBox.setText("")
        self.nesterovs_momentumCheckBox.setChecked(True)
        self.nesterovs_momentumCheckBox.setObjectName("nesterovs_momentumCheckBox")
        self.gridLayout.addWidget(self.nesterovs_momentumCheckBox, 5, 2, 1, 1)
        self.early_stoppingCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.early_stoppingCheckBox.setText("")
        self.early_stoppingCheckBox.setObjectName("early_stoppingCheckBox")
        self.gridLayout.addWidget(self.early_stoppingCheckBox, 5, 4, 1, 1)
        self.max_funLabel = QtWidgets.QLabel(self.centralwidget)
        self.max_funLabel.setObjectName("max_funLabel")
        self.gridLayout.addWidget(self.max_funLabel, 12, 5, 1, 1)
        self.max_funLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.max_funLineEdit.setObjectName("max_funLineEdit")
        self.gridLayout.addWidget(self.max_funLineEdit, 12, 6, 1, 1)
        self.cancelPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.cancelPushButton.setObjectName("cancelPushButton")
        self.gridLayout.addWidget(self.cancelPushButton, 12, 9, 1, 1)
        self.resetpushButton = QtWidgets.QPushButton(self.centralwidget)
        self.resetpushButton.setObjectName("resetpushButton")
        self.gridLayout.addWidget(self.resetpushButton, 12, 8, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        ANN_advset.setCentralWidget(self.centralwidget)

        self.retranslateUi(ANN_advset)
        QtCore.QMetaObject.connectSlotsByName(ANN_advset)
        ANN_advset.setTabOrder(self.hidden_layer_sizesLineEdit, self.activationComboBox)
        ANN_advset.setTabOrder(self.activationComboBox, self.solverComboBox)
        ANN_advset.setTabOrder(self.solverComboBox, self.alphaLineEdit)
        ANN_advset.setTabOrder(self.alphaLineEdit, self.batch_sizeLineEdit)
        ANN_advset.setTabOrder(self.batch_sizeLineEdit, self.learning_rateComboBox)
        ANN_advset.setTabOrder(self.learning_rateComboBox, self.learning_rate_initLineEdit)
        ANN_advset.setTabOrder(self.learning_rate_initLineEdit, self.power_tLineEdit)
        ANN_advset.setTabOrder(self.power_tLineEdit, self.max_iterLineEdit)
        ANN_advset.setTabOrder(self.max_iterLineEdit, self.shuffleCheckBox)
        ANN_advset.setTabOrder(self.shuffleCheckBox, self.random_stateLineEdit)
        ANN_advset.setTabOrder(self.random_stateLineEdit, self.tolLineEdit)
        ANN_advset.setTabOrder(self.tolLineEdit, self.verboseCheckBox)
        ANN_advset.setTabOrder(self.verboseCheckBox, self.warm_startCheckBox)
        ANN_advset.setTabOrder(self.warm_startCheckBox, self.momentumLineEdit)
        ANN_advset.setTabOrder(self.momentumLineEdit, self.nesterovs_momentumCheckBox)
        ANN_advset.setTabOrder(self.nesterovs_momentumCheckBox, self.early_stoppingCheckBox)
        ANN_advset.setTabOrder(self.early_stoppingCheckBox, self.validation_fractionLineEdit)
        ANN_advset.setTabOrder(self.validation_fractionLineEdit, self.beta_1LineEdit)
        ANN_advset.setTabOrder(self.beta_1LineEdit, self.beta_2LineEdit)
        ANN_advset.setTabOrder(self.beta_2LineEdit, self.epsilonLineEdit)
        ANN_advset.setTabOrder(self.epsilonLineEdit, self.n_iter_no_changeLineEdit)
        ANN_advset.setTabOrder(self.n_iter_no_changeLineEdit, self.max_funLineEdit)
        ANN_advset.setTabOrder(self.max_funLineEdit, self.resetpushButton)
        ANN_advset.setTabOrder(self.resetpushButton, self.cancelPushButton)
        ANN_advset.setTabOrder(self.cancelPushButton, self.applyPushButton)

    def retranslateUi(self, ANN_advset):
        _translate = QtCore.QCoreApplication.translate
        ANN_advset.setWindowTitle(_translate("ANN_advset", "ANN Advanced Settings"))
        self.power_tLineEdit.setText(_translate("ANN_advset", "0.5"))
        self.shuffleLabel.setToolTip(_translate("ANN_advset", "Whether to shuffle samples in each iteration. Only used when solver=’sgd’ or ‘adam’."))
        self.shuffleLabel.setText(_translate("ANN_advset", "shuffle"))
        self.learning_rate_initLineEdit.setText(_translate("ANN_advset", "0.001"))
        self.learning_rate_initLabel.setToolTip(_translate("ANN_advset", "The initial learning rate used. It controls the step-size in updating the weights. Only used when solver=’sgd’ or ‘adam’."))
        self.learning_rate_initLabel.setText(_translate("ANN_advset", "learning_rate_init"))
        self.power_tLabel.setToolTip(_translate("ANN_advset", "The exponent for inverse scaling learning rate. It is used in updating effective learning rate when the learning_rate is set to ‘invscaling’. Only used when solver=’sgd’."))
        self.power_tLabel.setText(_translate("ANN_advset", "power_t"))
        self.max_iterLabel.setToolTip(_translate("ANN_advset", "Maximum number of iterations. The solver iterates until convergence (determined by ‘tol’) or this number of iterations. For stochastic solvers (‘sgd’, ‘adam’), note that this determines the number of epochs (how many times each data point will be used), not the number of gradient steps."))
        self.max_iterLabel.setText(_translate("ANN_advset", "max_iter"))
        self.alphaLineEdit.setText(_translate("ANN_advset", "0.0001"))
        self.max_iterLineEdit.setText(_translate("ANN_advset", "200"))
        self.momentumLineEdit.setText(_translate("ANN_advset", "0.9"))
        self.batch_sizeLabel.setToolTip(_translate("ANN_advset", "Size of minibatches for stochastic optimizers. If the solver is ‘lbfgs’, the classifier will not use minibatch. When set to “auto”, batch_size=min(200, n_samples)"))
        self.batch_sizeLabel.setText(_translate("ANN_advset", "batch_size"))
        self.batch_sizeLineEdit.setText(_translate("ANN_advset", "auto"))
        self.verboseLabel.setToolTip(_translate("ANN_advset", "Whether to print progress messages to stdout."))
        self.verboseLabel.setText(_translate("ANN_advset", "verbose"))
        self.hidden_layer_sizesLabel.setToolTip(_translate("ANN_advset", "The ith element represents the number of neurons in the ith hidden layer."))
        self.hidden_layer_sizesLabel.setText(_translate("ANN_advset", "hidden_layer_sizes"))
        self.solverLabel.setToolTip(_translate("ANN_advset", "    The solver for weight optimization.\n"
"\n"
"        ‘lbfgs’ is an optimizer in the family of quasi-Newton methods.\n"
"        ‘sgd’ refers to stochastic gradient descent.\n"
"        ‘adam’ refers to a stochastic gradient-based optimizer proposed by Kingma, Diederik, and Jimmy Ba\n"
"\n"
"    Note: The default solver ‘adam’ works pretty well on relatively large datasets (with thousands of training samples or more) in terms of both training time and validation score. For small datasets, however, ‘lbfgs’ can converge faster and perform better."))
        self.solverLabel.setText(_translate("ANN_advset", "solver"))
        self.random_stateLabel.setToolTip(_translate("ANN_advset", "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random."))
        self.random_stateLabel.setText(_translate("ANN_advset", "random_state"))
        self.activationLabel.setToolTip(_translate("ANN_advset", "    Activation function for the hidden layer.\n"
"\n"
"        ‘identity’, no-op activation, useful to implement linear bottleneck, returns f(x) = x\n"
"        ‘logistic’, the logistic sigmoid function, returns f(x) = 1 / (1 + exp(-x)).\n"
"        ‘tanh’, the hyperbolic tan function, returns f(x) = tanh(x).\n"
"        ‘relu’, the rectified linear unit function, returns f(x) = max(0, x)"))
        self.activationLabel.setText(_translate("ANN_advset", "activation"))
        self.alphaLabel.setToolTip(_translate("ANN_advset", "L2 penalty (regularization term) parameter."))
        self.alphaLabel.setText(_translate("ANN_advset", "alpha"))
        self.hidden_layer_sizesLineEdit.setText(_translate("ANN_advset", "100"))
        self.learning_rateLabel.setToolTip(_translate("ANN_advset", "    Learning rate schedule for weight updates.\n"
"\n"
"        ‘constant’ is a constant learning rate given by ‘learning_rate_init’.\n"
"        ‘invscaling’ gradually decreases the learning rate at each time step ‘t’ using an inverse scaling exponent of ‘power_t’. effective_learning_rate = learning_rate_init / pow(t, power_t)\n"
"        ‘adaptive’ keeps the learning rate constant to ‘learning_rate_init’ as long as training loss keeps decreasing. Each time two consecutive epochs fail to decrease training loss by at least tol, or fail to increase validation score by at least tol if ‘early_stopping’ is on, the current learning rate is divided by 5.\n"
"\n"
"    Only used when solver=\'sgd\'."))
        self.learning_rateLabel.setText(_translate("ANN_advset", "learning_rate"))
        self.random_stateLineEdit.setText(_translate("ANN_advset", "None"))
        self.tolLabel.setToolTip(_translate("ANN_advset", "Tolerance for the optimization. When the loss or score is not improving by at least tol for n_iter_no_change consecutive iterations, unless learning_rate is set to ‘adaptive’, convergence is considered to be reached and training stops."))
        self.tolLabel.setText(_translate("ANN_advset", "tol"))
        self.warm_startLabel.setToolTip(_translate("ANN_advset", "When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution."))
        self.warm_startLabel.setText(_translate("ANN_advset", "warm_start"))
        self.momentumLabel.setToolTip(_translate("ANN_advset", "Momentum for gradient descent update. Should be between 0 and 1. Only used when solver=’sgd’."))
        self.momentumLabel.setText(_translate("ANN_advset", "momentum"))
        self.tolLineEdit.setText(_translate("ANN_advset", "0.0001"))
        self.nesterovs_momentumLabel.setToolTip(_translate("ANN_advset", "Whether to use Nesterov’s momentum. Only used when solver=’sgd’ and momentum > 0."))
        self.nesterovs_momentumLabel.setText(_translate("ANN_advset", "nesterovs_momentum"))
        self.validation_fractionLabel.setToolTip(_translate("ANN_advset", "The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if early_stopping is True"))
        self.validation_fractionLabel.setText(_translate("ANN_advset", "validation_fraction"))
        self.beta_1Label.setToolTip(_translate("ANN_advset", "Exponential decay rate for estimates of first moment vector in adam, should be in [0, 1). Only used when solver=’adam’"))
        self.beta_1Label.setText(_translate("ANN_advset", "beta_1"))
        self.beta_1LineEdit.setText(_translate("ANN_advset", "0.9"))
        self.early_stoppingLabel.setToolTip(_translate("ANN_advset", "Whether to use early stopping to terminate training when validation score is not improving. If set to true, it will automatically set aside 10% of training data as validation and terminate training when validation score is not improving by at least tol for n_iter_no_change consecutive epochs. Only effective when solver=’sgd’ or ‘adam’"))
        self.early_stoppingLabel.setText(_translate("ANN_advset", "early_stopping"))
        self.beta_2LineEdit.setText(_translate("ANN_advset", "0.999"))
        self.beta_2Label.setToolTip(_translate("ANN_advset", "Exponential decay rate for estimates of second moment vector in adam, should be in [0, 1). Only used when solver=’adam’"))
        self.beta_2Label.setText(_translate("ANN_advset", "beta_2"))
        self.validation_fractionLineEdit.setText(_translate("ANN_advset", "0.1"))
        self.applyPushButton.setText(_translate("ANN_advset", "Apply"))
        self.epsilonLabel.setToolTip(_translate("ANN_advset", "Value for numerical stability in adam. Only used when solver=’adam’"))
        self.epsilonLabel.setText(_translate("ANN_advset", "epsilon"))
        self.epsilonLineEdit.setText(_translate("ANN_advset", "0.00000001"))
        self.n_iter_no_changeLabel.setToolTip(_translate("ANN_advset", "Maximum number of epochs to not meet tol improvement. Only effective when solver=’sgd’ or ‘adam’"))
        self.n_iter_no_changeLabel.setText(_translate("ANN_advset", "n_iter_no_change"))
        self.n_iter_no_changeLineEdit.setText(_translate("ANN_advset", "10"))
        self.activationComboBox.setItemText(0, _translate("ANN_advset", "relu"))
        self.activationComboBox.setItemText(1, _translate("ANN_advset", "identity"))
        self.activationComboBox.setItemText(2, _translate("ANN_advset", "logistic"))
        self.activationComboBox.setItemText(3, _translate("ANN_advset", "tanh"))
        self.solverComboBox.setItemText(0, _translate("ANN_advset", "adam"))
        self.solverComboBox.setItemText(1, _translate("ANN_advset", "lbfgs"))
        self.solverComboBox.setItemText(2, _translate("ANN_advset", "sgd"))
        self.learning_rateComboBox.setItemText(0, _translate("ANN_advset", "constant"))
        self.learning_rateComboBox.setItemText(1, _translate("ANN_advset", "invscaling"))
        self.learning_rateComboBox.setItemText(2, _translate("ANN_advset", "adaptive"))
        self.max_funLabel.setToolTip(_translate("ANN_advset", "<html><head/><body><p>Only used when solver=’lbfgs’. Maximum number of loss function calls. The solver iterates until convergence (determined by ‘tol’), number of iterations reaches max_iter, or this number of loss function calls. Note that number of loss function calls will be greater than or equal to the number of iterations for the <span style=\" font-family:\'Courier New\';\">MLPClassifier</span>.</p></body></html>"))
        self.max_funLabel.setText(_translate("ANN_advset", "max_fun"))
        self.max_funLineEdit.setText(_translate("ANN_advset", "15000"))
        self.cancelPushButton.setText(_translate("ANN_advset", "Cancel"))
        self.resetpushButton.setText(_translate("ANN_advset", "Reset"))
